Build proto for Go:
protoc --proto_path=proto --go_out=backend/pb --go_opt=paths=source_relative --go-grpc_out=backend/pb --go-grpc_opt=paths=source_relative grid.proto

Build proto for TypeScript:
protoc --proto_path=proto --plugin=protoc-gen-ts=C:\Users\nedze\Projects\electric-grid-management\frontend\node_modules\.bin\protoc-gen-ts.cmd --js_out=import_style=commonjs,binary:frontend/src/app/pb --ts_out=service=grpc-web:frontend/src/app/pb proto/*.proto



import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class ObjectListService {
  private objectListSubject: BehaviorSubject<Object[]> = new BehaviorSubject([]);
  private objectList$: Observable<Object[]> = this.objectListSubject.asObservable();

  constructor() {}

  // Get the current object list as an observable
  getObjectList(): Observable<Object[]> {
    return this.objectList$;
  }

  // Add an object to the list
  addObject(object: Object) {
    const currentList = this.objectListSubject.getValue();
    currentList.push(object);
    this.objectListSubject.next([...currentList]);
  }

  // Remove an object from the list by its index
  removeObject(index: number) {
    const currentList = this.objectListSubject.getValue();
    if (index >= 0 && index < currentList.length) {
      currentList.splice(index, 1);
      this.objectListSubject.next([...currentList]);
    }
  }

  // Update an object in the list by its index
  updateObject(index: number, updatedObject: Object) {
    const currentList = this.objectListSubject.getValue();
    if (index >= 0 && index < currentList.length) {
      currentList[index] = updatedObject;
      this.objectListSubject.next([...currentList]);
    }
  }

  // Example of filtering objects based on a condition
  filterObjectsByCondition(condition: (object: Object) => boolean): Observable<Object[]> {
    return this.objectList$.pipe(
      map(objects => objects.filter(condition))
    );
  }
}


  greeting: GridNode[] = [];

  async handleClick(event: Event) {
    // this.greeting = await this.helloService.getGreeting();
    console.log(this.route.snapshot.queryParams);
  }