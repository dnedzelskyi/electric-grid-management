// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: grid.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GridServiceClient is the client API for GridService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GridServiceClient interface {
	GetGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGridResponse, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
}

type gridServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGridServiceClient(cc grpc.ClientConnInterface) GridServiceClient {
	return &gridServiceClient{cc}
}

func (c *gridServiceClient) GetGrid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGridResponse, error) {
	out := new(GetGridResponse)
	err := c.cc.Invoke(ctx, "/grid.GridService/GetGrid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gridServiceClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/grid.GridService/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gridServiceClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, "/grid.GridService/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GridServiceServer is the server API for GridService service.
// All implementations must embed UnimplementedGridServiceServer
// for forward compatibility
type GridServiceServer interface {
	GetGrid(context.Context, *emptypb.Empty) (*GetGridResponse, error)
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
	mustEmbedUnimplementedGridServiceServer()
}

// UnimplementedGridServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGridServiceServer struct {
}

func (UnimplementedGridServiceServer) GetGrid(context.Context, *emptypb.Empty) (*GetGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrid not implemented")
}
func (UnimplementedGridServiceServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedGridServiceServer) UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedGridServiceServer) mustEmbedUnimplementedGridServiceServer() {}

// UnsafeGridServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GridServiceServer will
// result in compilation errors.
type UnsafeGridServiceServer interface {
	mustEmbedUnimplementedGridServiceServer()
}

func RegisterGridServiceServer(s grpc.ServiceRegistrar, srv GridServiceServer) {
	s.RegisterService(&GridService_ServiceDesc, srv)
}

func _GridService_GetGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GridServiceServer).GetGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grid.GridService/GetGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GridServiceServer).GetGrid(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GridService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GridServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grid.GridService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GridServiceServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GridService_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GridServiceServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grid.GridService/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GridServiceServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GridService_ServiceDesc is the grpc.ServiceDesc for GridService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GridService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grid.GridService",
	HandlerType: (*GridServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGrid",
			Handler:    _GridService_GetGrid_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _GridService_GetNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _GridService_UpdateNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grid.proto",
}
